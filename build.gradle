plugins {
	id "java"
	id "signing"
	id "maven-publish"
	id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

group = "io.gitcoins"
version = "2.11"

// configure all java components to be published
publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

java {
	withJavadocJar()
	withSourcesJar()
}
// For signing you need to make signingKey and signingPassword available properties
// See https://docs.gradle.org/current/userguide/signing_plugin.html
// The following makes the key available via the Gradle Property signingKey
// export ORG_GRADLE_PROJECT_signingKey=`cat test-private.pgp`
// export ORG_GRADLE_PROJECT_signingPassword="password"
// After making the Gradle properties above available, you can try signing using
// ./gradlew signMavenPublication
//
signing {

	sign publishing.publications
}

// customize the pom so it complies to Maven central requirements
// https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/maven_plugin.html#sec:maven_pom_generation
project.plugins.withType(MavenPublishPlugin).all {
	PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
	publishing.publications.withType(MavenPublication).all { mavenPublication ->
		mavenPublication.pom {
			name = "${project.group}:${project.name}"
			description = name
			url = "https://github.com/rwinch/gradle-publish-ossrh-sample"
			licenses {
				license {
					name = "The Apache License, Version 2.0"
					url = "https://www.apache.org/licenses/LICENSE-2.0"
				}
			}
			developers {
				developer {
					id = "rwinch"
					name = "Rob Winch"
					email = "rwinch@noreply.github.com"
				}
			}
			scm {
				connection = "scm:git:https://github.com/rwinch/gradle-publish-ossrh-sample"
				developerConnection = "scm:git:ssh://github.com/rwinch/gradle-publish-ossrh-sample.git"
				url = "https://github.com/rwinch/gradle-publish-ossrh-sample"
			}
		}
	}
}

// The following makes the key available for publishing to Nexus
// export ORG_GRADLE_PROJECT_sonatypeUsername=${token name}
// export ORG_GRADLE_PROJECT_sonatypePassword=${token password}
// After making the Gradle properties above available, you can try publish using
// ./gradlew publishToSonatype
// ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository

nexusPublishing {
	repositories {
		//sonatype()
		sonatype {
		    nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
		    snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
		    packageGroup = "io.gitcoins"
		    stagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID')
			username =  System.getenv('ORG_GRADLE_PROJECT_sonatypeUsername')
			password =  System.getenv('ORG_GRADLE_PROJECT_sonatypePassword')
		}
	}

	// these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
	// If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
	connectTimeout = Duration.ofMinutes(3)
	clientTimeout = Duration.ofMinutes(3)
}

// configure publishing to a local directory for testing (not necessary)
// ./gradlew publishMavenToLocal
// tree ./build/repos/releases
publishing {
	repositories {
		maven {
			name = "local"

			def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
			def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

		}
	}
}
